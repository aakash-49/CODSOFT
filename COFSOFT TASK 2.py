# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jBY4rHd_N4LiTE-nMXsdMki87sfZknF1
"""

import math

# Define the Tic-Tac-Toe board
board = ['-'] * 9

# Define the players
human_player = 'X'
ai_player = 'O'

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for i in range(0, 9, 3):
        print(board[i], "|", board[i + 1], "|", board[i + 2])
    print()

# Function to check if the game is over
def is_game_over(board):
    # Check for a win
    for i in range(0, 9, 3):
        if board[i] == board[i + 1] == board[i + 2] != '-':
            return board[i]
    for i in range(3):
        if board[i] == board[i + 3] == board[i + 6] != '-':
            return board[i]
    if board[0] == board[4] == board[8] != '-':
        return board[0]
    if board[2] == board[4] == board[6] != '-':
        return board[2]

    # Check for a tie
    if '-' not in board:
        return 'Tie'

    return None

# Function to evaluate the current board state
def evaluate(board):
    winner = is_game_over(board)
    if winner == ai_player:
        return 1
    elif winner == human_player:
        return -1
    else:
        return 0

# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, maximizing_player, alpha, beta):
    if depth == 0 or is_game_over(board):
        return evaluate(board), None

    if maximizing_player:
        max_eval = -math.inf
        best_move = None

        for i in range(9):
            if board[i] == '-':
                board[i] = ai_player
                eval, _ = minimax(board, depth - 1, False, alpha, beta)
                board[i] = '-'

                if eval > max_eval:
                    max_eval = eval
                    best_move = i

                alpha = max(alpha, eval)
                if beta <= alpha:
                    break

        return max_eval, best_move

    else:
        min_eval = math.inf
        best_move = None

        for i in range(9):
            if board[i] == '-':
                board[i] = human_player
                eval, _ = minimax(board, depth - 1, True, alpha, beta)
                board[i] = '-'

                if eval < min_eval:
                    min_eval = eval
                    best_move = i

                beta = min(beta, eval)
                if beta <= alpha:
                    break

        return min_eval, best_move

# Function for the AI to make a move
def ai_move():
    _, best_move = minimax(board, 9, True, -math.inf, math.inf)
    return best_move

# Main game loop
while True:
    print_board(board)
    if is_game_over(board):
        result = is_game_over(board)
        if result == 'Tie':
            print("It's a tie!")
        else:
            print(result, "wins!")
        break

    if not any('-' in row for row in board):
        print("It's a tie!")
        break

    while True:
        try:
            human_move = int(input("Enter your move (1-9): ")) - 1
            if board[human_move] == '-':
                board[human_move] = human_player
                break
            else:
                print("Invalid move. Try again.")
        except (ValueError, IndexError):
            print("Invalid input. Please enter a number between 1 and 9.")

    print_board(board)

    if is_game_over(board):
        result = is_game_over(board)
        if result == 'Tie':
            print("It's a tie!")
        else:
            print(result, "wins!")
        break

    ai_best_move = ai_move()
    board[ai_best_move] = ai_player
    print("AI chose to place", ai_player, "at position", ai_best_move + 1)